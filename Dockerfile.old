ARG phpV=8.1.9
FROM php:${phpV}-alpine AS builder

# install composer
COPY build/composer-setup.php .
#ADD https://getcomposer.org/installer composer-setup.php
RUN ["php", "composer-setup.php", "--install-dir=/bin", "--filename=composer"]

# Install unzip for symfony/flex
RUN ["apk", "add", "--no-cache", "unzip"]

#install soap
#RUN apt-get update && \
#    apt-get install -y libxml2-dev
## install mysql driver
#RUN docker-php-ext-install pdo_mysql

WORKDIR /app
COPY bin /app/bin/
COPY config /app/config/
COPY migrations /app/migrations/
COPY public /app/public/
COPY src /app/src/
COPY templates /app/templates/
COPY translations /app/translations/
COPY .env /app/
COPY composer.json /app/
COPY db_check.php /app/
COPY phpunit.xml.dist /app/

# install php requirements
RUN ["composer", "install"]


FROM php:${phpV}-alpine AS symfony
# add symfony-cli package
RUN ["apk", "add", "--no-cache", "bash"]
#$ curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.alpine.sh' | sudo -E bash \
COPY build/symfony-cli-alpine.sh /tmp/
RUN ["bash", "/tmp/symfony-cli-alpine.sh"]
# Install (unzip for symfony/flex), symfony,
RUN ["apk", "add", "--no-cache", "symfony-cli"]
RUN ["rm", "/tmp/symfony-cli-alpine.sh"]

## install mysql driver
RUN docker-php-ext-install pdo_mysql



FROM symfony AS runner
WORKDIR /app
COPY --from=builder /app /app

# migrate database
#RUN ["symfony", "console", "doctrine:migrations:migrate", "--no-interaction"]

# TODO: generate private public key jwt

EXPOSE 8000
ENTRYPOINT ["symfony", "server:start"]
#ENTRYPOINT ["sh", "-c", "while true; do sleep 1; done"]
